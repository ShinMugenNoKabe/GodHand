openapi: 3.0.3
info:
  title: Cheyflon - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_
    
    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:3000/api/v1/
tags:
  - name: users
    description: Operations about users
paths:
  /users/register:
    post:
      tags:
        - users
      summary: Register new user
      description: Registers a new user and returns a JWT Token that auths the user.
      operationId: registerUser
      requestBody:
        description: New user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        default:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailsJWT'

  /users/login:
    post:
      tags:
        - users
      summary: Log in
      description: Logs in via an authentication token. If the token is expired, a new one is generated
      operationId: login
      security:
        - bearerAuth: []
      requestBody:
        description: Log in
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogIn'
      responses:
        default:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailsJWT'
    
components:
  schemas:
    UserRegister:
      type: object
      properties:
        username:
          type: string
          example: theUser
        password:
          type: string
          example: '12345'
        email:
          type: string
          example: john@email.com
    UserLogIn:
      type: object
      properties:
        username:
          type: string
          example: theUser
        password:
          type: string
          example: '12345'
        email:
          type: string
          example: john@email.com
    DetailsJWT:
      type: object
      properties:
        detail:
          type: string
          description: The JWT token used to authenticate
          example: eyJh...
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT